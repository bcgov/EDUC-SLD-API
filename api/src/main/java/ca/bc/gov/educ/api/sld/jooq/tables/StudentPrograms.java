/*
 * This file is generated by jOOQ.
 */
package ca.bc.gov.educ.api.sld.jooq.tables;


import ca.bc.gov.educ.api.sld.jooq.DefaultSchema;
import ca.bc.gov.educ.api.sld.jooq.Keys;
import ca.bc.gov.educ.api.sld.jooq.tables.records.StudentProgramsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentPrograms extends TableImpl<StudentProgramsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>STUDENT_PROGRAMS</code>
     */
    public static final StudentPrograms STUDENT_PROGRAMS = new StudentPrograms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentProgramsRecord> getRecordType() {
        return StudentProgramsRecord.class;
    }

    /**
     * The column <code>STUDENT_PROGRAMS.REPORT_DATE</code>.
     */
    public final TableField<StudentProgramsRecord, Long> REPORT_DATE = createField(DSL.name("REPORT_DATE"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>STUDENT_PROGRAMS.STUDENT_ID</code>.
     */
    public final TableField<StudentProgramsRecord, String> STUDENT_ID = createField(DSL.name("STUDENT_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>STUDENT_PROGRAMS.CAREER_PROGRAM</code>.
     */
    public final TableField<StudentProgramsRecord, String> CAREER_PROGRAM = createField(DSL.name("CAREER_PROGRAM"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>STUDENT_PROGRAMS.DISTNO</code>.
     */
    public final TableField<StudentProgramsRecord, String> DISTNO = createField(DSL.name("DISTNO"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>STUDENT_PROGRAMS.ENROLLED_PROGRAM_CODE</code>.
     */
    public final TableField<StudentProgramsRecord, String> ENROLLED_PROGRAM_CODE = createField(DSL.name("ENROLLED_PROGRAM_CODE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>STUDENT_PROGRAMS.PEN</code>.
     */
    public final TableField<StudentProgramsRecord, String> PEN = createField(DSL.name("PEN"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>STUDENT_PROGRAMS.SCHLNO</code>.
     */
    public final TableField<StudentProgramsRecord, String> SCHLNO = createField(DSL.name("SCHLNO"), SQLDataType.VARCHAR(255), this, "");

    private StudentPrograms(Name alias, Table<StudentProgramsRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentPrograms(Name alias, Table<StudentProgramsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>STUDENT_PROGRAMS</code> table reference
     */
    public StudentPrograms(String alias) {
        this(DSL.name(alias), STUDENT_PROGRAMS);
    }

    /**
     * Create an aliased <code>STUDENT_PROGRAMS</code> table reference
     */
    public StudentPrograms(Name alias) {
        this(alias, STUDENT_PROGRAMS);
    }

    /**
     * Create a <code>STUDENT_PROGRAMS</code> table reference
     */
    public StudentPrograms() {
        this(DSL.name("STUDENT_PROGRAMS"), null);
    }

    public <O extends Record> StudentPrograms(Table<O> child, ForeignKey<O, StudentProgramsRecord> key) {
        super(child, key, STUDENT_PROGRAMS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<StudentProgramsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8;
    }

    @Override
    public List<UniqueKey<StudentProgramsRecord>> getKeys() {
        return Arrays.<UniqueKey<StudentProgramsRecord>>asList(Keys.CONSTRAINT_8);
    }

    @Override
    public StudentPrograms as(String alias) {
        return new StudentPrograms(DSL.name(alias), this);
    }

    @Override
    public StudentPrograms as(Name alias) {
        return new StudentPrograms(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentPrograms rename(String name) {
        return new StudentPrograms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentPrograms rename(Name name) {
        return new StudentPrograms(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
